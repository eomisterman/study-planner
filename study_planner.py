#!/usr/bin/env python3
"""
Study Planner - Transform video course outlines into balanced study schedules.

A command-line tool that takes JSON course outlines and generates Markdown
study schedules with progress tracking checkboxes.
"""

import argparse
import json
import sys
from datetime import datetime, timedelta


def parse_course_json(input_file):
    """Parse and validate JSON course file."""
    print(f"📖 Parsing course file: {input_file}")
    try:
        # TODO: Implement full JSON parsing and validation in Phase 2
        # For now, return placeholder data to test pipeline
        return {
            "course_title": "Sample Course",
            "sections": []
        }
    except Exception as e:
        print(f"❌ Error parsing course file: {e}")
        raise


def schedule_course(course_data, daily_limit, start_date):
    """Generate balanced study schedule from course data."""
    print(f"📅 Scheduling course: {course_data['course_title']}")
    print(f"   Daily limit: {daily_limit} minutes")
    print(f"   Start date: {start_date}")
    try:
        # TODO: Implement core scheduling algorithm in Phase 3
        # For now, return placeholder scheduled days
        return [
            {
                "day": 1,
                "date": start_date,
                "items": [],
                "total_minutes": 0
            }
        ]
    except Exception as e:
        print(f"❌ Error scheduling course: {e}")
        raise


def generate_markdown(scheduled_days):
    """Generate Markdown output with checkboxes."""
    print(f"📝 Generating Markdown for {len(scheduled_days)} days")
    try:
        # TODO: Implement Markdown generation in Phase 4
        # For now, return placeholder markdown
        return "# Study Schedule\n\n*Generated by Study Planner*"
    except Exception as e:
        print(f"❌ Error generating Markdown: {e}")
        raise


def write_output(markdown_content, output_filename):
    """Write Markdown content to file."""
    print(f"💾 Writing output to: {output_filename}")
    try:
        # TODO: Implement file output in Phase 4
        # For now, just show what would be written
        print("Preview of output:")
        print("-" * 40)
        print(markdown_content)
        print("-" * 40)
        print(f"✅ Would write to: {output_filename}")
    except Exception as e:
        print(f"❌ Error writing output: {e}")
        raise


def main():
    """Main pipeline function."""
    # Set up command-line argument parsing
    parser = argparse.ArgumentParser(
        description="Transform video course outlines into balanced study schedules.",
        epilog="Example: python study_planner.py sample_course.json 60 2024-01-15"
    )
    
    parser.add_argument(
        "course_file",
        help="JSON file containing course outline"
    )
    
    parser.add_argument(
        "daily_minutes", 
        type=int,
        help="Maximum study time per day (20-480 minutes)"
    )
    
    parser.add_argument(
        "start_date",
        help="Start date in YYYY-MM-DD format"
    )
    
    # Parse arguments
    try:
        args = parser.parse_args()
    except SystemExit:
        return
    
    # Extract arguments for pipeline
    input_file = args.course_file
    daily_limit = args.daily_minutes
    start_date = args.start_date
    
    print(f"Study Planner")
    print(f"Course File: {input_file}")
    print(f"Daily Limit: {daily_limit} minutes")
    print(f"Start Date: {start_date}")
    print()
    
    try:
        # Execute the full pipeline
        print("🚀 Starting pipeline...")
        
        # Phase 1: Parse course data
        course_data = parse_course_json(input_file)
        
        # Phase 2: Generate schedule
        scheduled_days = schedule_course(course_data, daily_limit, start_date)
        
        # Phase 3: Generate Markdown
        markdown = generate_markdown(scheduled_days)
        
        # Phase 4: Write output file
        output_filename = f"{course_data['course_title'].lower().replace(' ', '_')}_schedule.md"
        write_output(markdown, output_filename)
        
        print()
        print("✅ Pipeline completed successfully!")
        print("Ready for Phase 2 implementation: Input Validation & Parsing")
        
    except Exception as e:
        print()
        print(f"💥 Pipeline failed: {e}")
        print("Check the error above and try again.")
        sys.exit(1)


if __name__ == "__main__":
    main()